import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:work_timer/presentation/m_stopwatch.dart';
import 'package:work_timer/presentation/stopwatch/data/s_stopwatch.dart';

// basic declearations ---------
// singele----
// BlocProvider(
//   create: (_) => CounterBloc(),
//   child: MyHomePage(),
// )

// multi ----
// MultiBlocProvider(
//   providers: [
//     BlocProvider(create: (_) => AuthBloc()),
//     BlocProvider(create: (_) => ThemeBloc()),
//     BlocProvider(create: (_) => UserBloc()),
//   ],
//   child: MyApp(),
// )

// event
abstract class CounterEvent {} // abstract class

class IncrementEvent extends CounterEvent {
  final MStopwatch? mStopwatch;
  IncrementEvent({this.mStopwatch});
}

// state
class CurrentState {
  MStopwatch mStopwatch = MStopwatch(
    isRunning: false,
    lapList: [],
    duration: Duration.zero,
  );
  CurrentState({required this.mStopwatch});
}

class CounterBloc extends Bloc<CounterEvent, CurrentState> {
  CounterBloc()
    : super(
        CurrentState(
          mStopwatch: MStopwatch(
            isRunning: false,
            lapList: [],
            duration: Duration.zero,
          ),
        ),
      ) {
    initializeFromSharedPreferences();
    // ui will rebuild on emit if the emited instance are not same.
    // Note: because bloc check by instance/reference not value,
    // Note: in here we are emit every time a new instance("CurrentState(currentCountTime: state.currentCountTime + event.duration))") that's why ui will be rubild even we are emiting same value.
    // ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶™‡¶®‡¶ø every time same instance/reference emit ‡¶ï‡¶∞‡ßá‡¶® ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ inside data modify ‡¶ï‡¶∞‡ßá‡¶®, ‡¶§‡¶æ‡¶π‡¶≤‡ßá:
    // ‚úÖ Stored state data change ‡¶π‡¶¨‡ßá
    // ‚ùå UI rebuild ‡¶π‡¶¨‡ßá‡¶®‡¶æ, example
    // on<IncrementEvent>((event, emit) {
    //   state.count = state.count + 1;  // ‚úÖ Data change ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    //   emit(state);                    // ‚ùå But same reference
    // });
    
    on<IncrementEvent>((event, emit) async {
      SStopwatch.getInstance.saveCurrentStopwatchState(event.mStopwatch);
      return emit(
        CurrentState(mStopwatch: event.mStopwatch ?? state.mStopwatch),
      );
    });
  }

  Future<void> initializeFromSharedPreferences() async {
    try {
      // Fetch the saved stopwatch state from SharedPreferences
      final MStopwatch? savedStopwatch = await SStopwatch.getInstance
          .getCurrentStopwatchState();

      if (savedStopwatch != null) {
        // Emit the saved state as initial state
        print("sted pre stopwatch value");
        add(IncrementEvent(mStopwatch: savedStopwatch));
        // emit(CurrentState(mStopwatch: MStopwatch(isRunning: false, lapList: [], duration: Duration(seconds: 50))));
      }else{
        print("state was not save in parsestance store");
      }
    } catch (e) {
      // Handle error, maybe log it
      // Continue with default state
      debugPrint('Error loading from SharedPreferences: $e');
    }
  }
}



// fatch methods------------
// // first way
// CounterBloc  uBloc = context.read<CounterBloc>();

// // 2nd way 
// BlocBuilder<CounterBloc,CurrentState>(
//   builder: (context,CurrentState) {
//     return Widget;
//   }
// ),

// // 3rd way
// üß© ‡ß©Ô∏è‚É£ BlocListener
// üëâ Bloc ‡¶è‡¶∞ state ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶≤‡ßá ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶æ‡¶≤‡¶æ‡¶§‡ßá (side effect trigger ‡¶ï‡¶∞‡¶§‡ßá) ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§
// üîπ ‡¶è‡¶ü‡¶æ UI rebuild ‡¶ï‡¶∞‡ßá ‡¶®‡¶æ
// üîπ ‡¶¨‡¶∞‡¶Ç ‡¶∂‡ßÅ‡¶ß‡ßÅ listen ‡¶ï‡¶∞‡ßá state ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶®
// üîπ ‡¶Ø‡ßá‡¶Æ‡¶® Snackbar ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã, Navigation ‡¶ï‡¶∞‡¶æ, Dialog ‡¶ñ‡ßã‡¶≤‡¶æ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
// BlocListener<AuthBloc, AuthState>(
//   listener: (context, state) {
//     if (state is AuthSuccess) {
//       ScaffoldMessenger.of(context).showSnackBar(
//         SnackBar(content: Text("Login Success")),
//       );
//     }
//   },
//   child: LoginForm(),
// )

// // 4th way
// üß© ‡ß™Ô∏è‚É£ BlocConsumer
// üëâ ‡¶è‡¶ü‡¶æ BlocBuilder + BlocListener ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá‡•§
// üîπ ‡¶Ö‡¶∞‡ßç‡¶•‡¶æ‡ßé ‚Äî ‡¶è‡¶ï‡¶á Bloc ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø UI rebuild + side effect ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá
// üîπ ‡¶¶‡ßÅ‡¶á‡¶ü‡¶æ ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ Widget ‡¶®‡¶æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶è‡¶ï‡¶ü‡¶æ‡¶§‡ßá‡¶á ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü
// BlocConsumer<UserBloc, UserState>(
//   listener: (context, state) {
//     if (state is UserError) {
//       ScaffoldMessenger.of(context)
//           .showSnackBar(SnackBar(content: Text(state.message)));
//     }
//   },
//   builder: (context, state) {
//     if (state is UserLoading) {
//       return CircularProgressIndicator();
//     } else if (state is UserLoaded) {
//       return Text("Welcome, ${state.name}");
//     } else {
//       return Text("Press Load");
//     }
//   },
// )
// üïê ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶Ø‡¶ñ‡¶® ‡¶è‡¶ï‡¶á Bloc ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø UI rebuild + event-based action ‡¶¶‡ßÅ‡¶ü‡ßã‡¶á ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡ßü‡•§

// // 5th way
// üß© ‡ß¨Ô∏è‚É£ BlocSelector
// üëâ Bloc ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶Ö‡¶Ç‡¶∂ listen ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡•§
// üîπ ‡¶™‡ßÅ‡¶∞‡ßã state rebuild ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶Ö‡¶Ç‡¶∂ rebuild ‡¶π‡ßü
// üîπ Performance ‡¶¨‡¶æ‡ßú‡¶æ‡ßü
// BlocSelector<CounterBloc, CurrentState, int>(
//   selector: (state) => state.count,
//   builder: (context, count) {
//     return Text('Count: $count');
//   },
// )
// üïê ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: ‡¶¨‡ßú Bloc state ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶è‡¶¨‡¶Ç UI ‡¶è‡¶∞ ‡¶õ‡ßã‡¶ü ‡¶Ö‡¶Ç‡¶∂ ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶¶‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶π‡¶≤‡ßá‡•§

// debuging and loging ----------------------------------------------------------------------------------------------------------------------
// üß© ‡ß≠Ô∏è‚É£ BlocObserver
// üëâ ‡¶è‡¶ü‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶§‡ßÅ‡¶Æ‡¶ø Bloc ‡¶è‡¶∞ ‡¶∏‡¶ï‡¶≤ event ‡¶è‡¶¨‡¶Ç state transition track ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã (debugging/logging ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)‡•§
// class MyBlocObserver extends BlocObserver {
//   @override
//   void onTransition(Bloc bloc, Transition transition) {
//     print(transition);
//     super.onTransition(bloc, transition);
//   }
// }
// main.dart ‡¶è ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã üëá
// void main() {
//   Bloc.observer = MyBlocObserver();
//   runApp(MyApp());
// }
// üïê ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: Debugging ‡¶¨‡¶æ Analytics purpose ‡¶è Bloc state change ‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá‡•§

// others method ------------------------------------------
// it will help to change data without update screen.
// context.read<CounterBloc>().state.currentCountTime = Duration(seconds: 5);

// class Person {
//   String name;
//   Person(this.name);
// }
// void main() {
//   var p = Person("Romjan");
//   fun(p);
//   print(p.name); // Output: Ali
// }
// void fun(Person val) {
//   val.name = "Ali"; // ‡¶è‡¶á ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶Ü‡¶∏‡¶≤ object ‡¶è‡¶ì ‡¶π‡¶¨‡ßá
// }
// void fun(Person val) {
//   val = Person("New Person"); // ‡¶è‡¶ñ‡¶® val ‡¶Ö‡¶®‡ßç‡¶Ø object ‡¶è‡¶∞ ‡¶¶‡¶ø‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂ ‡¶ï‡¶∞‡¶õ‡ßá
// }
